# All this infomation could be moved into pyproject.toml (from setuptools major version 61),
# but setup.cfg is used for backwards compatibility with pyhton 2.7 (which is only supported by setuptools major version 44 and older)
[metadata]
name = pymcuprog
# Get version from package source (__version__ variable in __init__.py)
version = attr: pymcuprog.__version__
author = Microchip Technology
author_email = support@microchip.com
description = Tools for programming of MCUs using Microchip CMSIS-DAP based debuggers
long_description = file: pypi.md, CHANGELOG.md
long_description_content_type = text/markdown
license = MIT
keywords = Microchip, nEDBG, Curiosity Nano, PKOB nano, debugger
classifiers =
    Development Status :: 5 - Production/Stable
    Intended Audience :: Developers
    Topic :: Software Development :: Embedded Systems
    # Note that Python 2.7 support is intentionally left out here as Python 2.7 support is only for internal use,
    # and is not tested before release, so it is not advertised externally
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Programming Language :: Python :: 3.11
    Programming Language :: Python :: 3.12
    Programming Language :: Python :: 3.13
    Operating System :: Microsoft :: Windows
    Operating System :: POSIX :: Linux
    Operating System :: MacOS
    License :: OSI Approved :: MIT License

[options]
install_requires =
    # External packages
    pyserial
    IntelHex
    PyYAML
    appdirs
    # pathlib2 is needed for Python 2.7 compatibility
    pathlib2; python_version < "3"

    # Microchip packages
    pyedbglib~=2.24
python_requires = >=2.7
include_package_data = True
packages = find:

[options.extras_require]
dev =
    pylint>=2.15
test =
    mock
    parameterized
    pytest
doc =
    # To avoid missing modules when generating documentation the mock module used by the tests is needed.
    # The mock module could also be useful if some imports need to be mocked out when generating documentation.
    mock
    sphinx

[options.entry_points]
console_scripts =
    pymcuprog = pymcuprog.pymcuprog:main

[options.packages.find]
exclude =
    pymcuprog.tests*
    doc*
    build*

[options.package_data]
pymcuprog = logging.yaml
